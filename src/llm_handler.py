"""Ollama LLM integration with web search support."""

import requests
import json
from typing import Optional
from . import config
from .web_search import WebSearchHandler


class OllamaHandler:
    """Handles communication with Ollama API with web search capability."""
    
    def __init__(self):
        self.base_url = config.OLLAMA_BASE_URL
        self.model = config.OLLAMA_MODEL
        self.api_endpoint = config.OLLAMA_API_ENDPOINT
        self.conversation_history = []
        self.current_language = "en"
        
        # Initialize web search
        self.web_search = WebSearchHandler()
        
        # Verify Ollama is running
        self._check_connection()
    
    def _check_connection(self):
        """Check if Ollama is running and model is available."""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            response.raise_for_status()
            
            models = response.json().get("models", [])
            model_names = [m["name"] for m in models]
            
            if self.model not in model_names:
                print(f"тЪая╕П Warning: Model '{self.model}' not found")
                print(f"Available models: {', '.join(model_names)}")
            else:
                print(f"тЬЕ Connected to Ollama - Using model: {self.model}")
                
        except requests.exceptions.RequestException as e:
            print(f"тЭМ Cannot connect to Ollama: {e}")
            print("Make sure Ollama is running: ollama serve")
            raise
    
    def _needs_web_search(self, query: str) -> bool:
        """Determine if query needs web search for current information."""
        
        query_lower = query.lower()
        
        # Explicit search keywords
        explicit_search = [
            'search', 'find', 'look up', 'google', 'search for',
            'рдЦреЛрдЬреЗрдВ', 'рдвреВрдВрдвреЗрдВ', 'рд╕рд░реНрдЪ',
            'рк╢рлЛркзрлЛ', 'рк╢рлЛркз'
        ]
        
        if any(keyword in query_lower for keyword in explicit_search):
            return True
        
        # News-related queries
        news_keywords = [
            'news', 'latest', 'recent', 'update', 'happening', 'today',
            'рд╕рдорд╛рдЪрд╛рд░', 'рдЦрд╝рдмрд░', 'рддрд╛рдЬрд╝рд╛', 'рдЖрдЬ',
            'рк╕ркорк╛ркЪрк╛рк░', 'ркдрк╛ркЬрк╛', 'ркЖркЬрлЗ'
        ]
        
        if any(keyword in query_lower for keyword in news_keywords):
            return True
        
        # Time-sensitive queries
        time_sensitive = [
            'weather', 'temperature', 'forecast',
            'price', 'cost', 'value', 'worth',
            'stock', 'market', 'rate',
            'score', 'match', 'game', 'result',
            'event', 'concert', 'show',
            'рдореМрд╕рдо', 'рддрд╛рдкрдорд╛рди', 'рдХреАрдордд', 'рд╕реНрдЯреЙрдХ',
            'рк╣рк╡рк╛ркорк╛рки', 'ркХрк┐ркВркоркд', 'рк╕рлНркЯрлЛркХ'
        ]
        
        if any(keyword in query_lower for keyword in time_sensitive):
            return True
        
        # Question words that often need current info
        current_info_patterns = [
            'what is happening', 'what happened', 'who won', 'who is',
            'where is', 'when is', 'how much', 'current',
            'рдХреНрдпрд╛ рд╣реЛ рд░рд╣рд╛', 'рдХреНрдпрд╛ рд╣реБрдЖ', 'рдХреМрди рд╣реИ', 'рд╡рд░реНрддрдорд╛рди',
            'рк╢рлБркВ ркеркИ рк░рк╣рлНркпрлБркВ', 'рк╢рлБркВ ркеркпрлБркВ', 'ркХрлЛркг ркЫрлЗ', 'рк╡рк░рлНркдркорк╛рки'
        ]
        
        if any(pattern in query_lower for pattern in current_info_patterns):
            return True
        
        return False

    
    def _is_knowledge_query(self, query: str) -> bool:
        """Detect if query is asking for factual knowledge (good for Wikipedia)."""
        knowledge_patterns = [
            'what is', 'who is', 'what are', 'who are',
            'tell me about', 'explain', 'describe',
            'definition of', 'meaning of', 'history of',
            'рдХреНрдпрд╛ рд╣реИ', 'рдХреМрди рд╣реИ', 'рдмрддрд╛рдУ', 'рд╕рдордЭрд╛рдУ',
            'рк╢рлБркВ ркЫрлЗ', 'ркХрлЛркг ркЫрлЗ', 'ркЬркгрк╛рк╡рлЛ', 'рк╕ркоркЬрк╛рк╡рлЛ'
        ]
        
        query_lower = query.lower()
        return any(pattern in query_lower for pattern in knowledge_patterns)

    def generate_response(self, user_input: str, language: str = "en") -> Optional[str]:
        """Generate response with intelligent source selection."""
        try:
            self.current_language = language
            web_context = ""
            
            if config.ENABLE_WEB_SEARCH:
                # Determine search type
                is_news = self._needs_web_search(user_input) and any(
                    word in user_input.lower() 
                    for word in ['news', 'latest', 'recent', 'рд╕рдорд╛рдЪрд╛рд░', 'рк╕ркорк╛ркЪрк╛рк░']
                )
                
                is_knowledge = self._is_knowledge_query(user_input)
                
                if is_news:
                    # News search
                    print("ЁЯУ░ Searching for news...")
                    search_results = self.web_search.search_news(user_input, max_results=5)
                elif is_knowledge:
                    # Try Wikipedia first for knowledge queries
                    print("ЁЯУЪ Checking Wikipedia...")
                    search_results = self.web_search._search_wikipedia(user_input, language)
                    
                    # If Wikipedia has no results, try web search
                    if not search_results:
                        print("ЁЯФН Wikipedia not found, trying web search...")
                        search_results = self.web_search.search(user_input, max_results=5)
                elif self._needs_web_search(user_input):
                    # Regular web search
                    print("ЁЯМР Searching web...")
                    search_results = self.web_search.search(user_input, max_results=5)
                else:
                    search_results = []
                
                if search_results:
                    web_context = self.web_search.format_search_results(
                        search_results,
                        language
                    )
                    print(f"тЬЕ Using {len(search_results)} search results")
                else:
                    print("тЪая╕П No search results, using general knowledge")
            
            # Build prompt and generate response
            prompt = self._build_prompt(user_input, language, web_context)
            
            # API request payload
            payload = {
                "model": self.model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "top_p": 0.9,
                    "num_predict": 200
                }
            }
            
            print("ЁЯдФ Thinking...")
            
            response = requests.post(
                self.api_endpoint,
                json=payload,
                timeout=60
            )
            response.raise_for_status()
            
            result = response.json()
            assistant_response = result.get("response", "").strip()
            
            if assistant_response:
                # Update conversation history
                self.conversation_history.append({
                    "role": "user",
                    "content": user_input,
                    "language": language
                })
                self.conversation_history.append({
                    "role": "assistant",
                    "content": assistant_response,
                    "language": language
                })
                
                # Keep only last 6 exchanges
                if len(self.conversation_history) > 12:
                    self.conversation_history = self.conversation_history[-12:]
                
                print(f"ЁЯТм Assistant: {assistant_response}")
                return assistant_response
            else:
                print("тЪая╕П Empty response from model")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"тЭМ API error: {e}")
            return None
        except Exception as e:
            print(f"тЭМ Unexpected error: {e}")
            import traceback
            traceback.print_exc()
            return None

    
    def _build_prompt(self, user_input: str, language: str, web_context: str = "") -> str:
        """Build prompt with language instruction, web context, and conversation history."""
        
        assistant_name = config.ASSISTANT_NAME
        assistant_name_hi = config.ASSISTANT_NAME_HI
        assistant_name_gu = config.ASSISTANT_NAME_GU
        
        # Enhanced language-specific system prompts with web search capability
        language_instructions = {
            "en": f"""You are {assistant_name}, a helpful AI voice assistant with web search capability.
Respond ONLY in clear, natural English. Keep responses brief and conversational.
If web search results are provided, use them to give accurate, up-to-date information.
Cite sources when using web information.""",
            
            "hi": f"""рддреБрдо {assistant_name_hi} рд╣реЛ, рдПрдХ рд╕рд╣рд╛рдпрдХ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рдЬреЛ рд╡реЗрдм рдЦреЛрдЬ рдХрд░ рд╕рдХрддреА рд╣реИред
рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЛред рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдФрд░ рд╕реНрдкрд╖реНрдЯ рдЙрддреНрддрд░ рджреЛред рдЕрдВрдЧреНрд░реЗрдЬреА рдХрд╛ рдкреНрд░рдпреЛрдЧ рдмрд┐рд▓реНрдХреБрд▓ рди рдХрд░реЗрдВред
рдЕрдЧрд░ рд╡реЗрдм рдЦреЛрдЬ рдкрд░рд┐рдгрд╛рдо рджрд┐рдП рдЧрдП рд╣реИрдВ, рддреЛ рдЙрдирдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╕рдЯреАрдХ рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВред""",
            
            "gu": f"""ркдркорлЗ {assistant_name_gu} ркЫрлЛ, ркПркХ рк╕рк╣рк╛ркпркХ AI ркЖрк╕рк┐рк╕рлНркЯркирлНркЯ ркЬрлЗ рк╡рлЗркм рк╢рлЛркз ркХрк░рлА рк╢ркХрлЗ ркЫрлЗ.
рклркХрлНркд ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ркЬрк╡рк╛ркм ркЖрккрлЛред рк╕ркВркХрлНрк╖рк┐рккрлНркд ркЕркирлЗ рк╕рлНрккрк╖рлНркЯ ркЬрк╡рк╛ркмрлЛ ркЖрккрлЛред ркЕркВркЧрлНрк░рлЗркЬрлАркирлЛ ркЙрккркпрлЛркЧ рки ркХрк░рлЛред
ркЬрлЛ рк╡рлЗркм рк╢рлЛркз рккрк░рк┐ркгрк╛ркорлЛ ркЖрккрк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ, ркдрлЛ ркдрлЗркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлАркирлЗ рк╕ркЪрлЛркЯ ркорк╛рк╣рк┐ркдрлА ркЖрккрлЛ."""
        }
        
        system_instruction = language_instructions.get(
            language,
            f"You are {assistant_name}, a helpful AI assistant with web search. Respond ONLY in {language}."
        )
        
        prompt_parts = [system_instruction, "\n\n"]
        
        # Add web search context if available
        if web_context:
            prompt_parts.append(web_context)
            prompt_parts.append("\n\nUse the above web search information to answer the question.\n\n")
        
        # Add conversation history
        for message in self.conversation_history[-6:]:
            if message.get("language") == language:
                role = message["role"]
                content = message["content"]
                
                if role == "user":
                    prompt_parts.append(f"User: {content}\n")
                else:
                    prompt_parts.append(f"{assistant_name}: {content}\n")
        
        # Add current user input
        prompt_parts.append(f"User: {user_input}\n")
        
        if language == "hi":
            prompt_parts.append(f"{assistant_name_hi} (рд╣рд┐рдВрджреА рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВ): ")
        elif language == "gu":
            prompt_parts.append(f"{assistant_name_gu} (ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ркЬрк╡рк╛ркм ркЖрккрлЛ): ")
        else:
            prompt_parts.append(f"{assistant_name}: ")
        
        return "".join(prompt_parts)
    
    def reset_conversation(self):
        """Clear conversation history."""
        self.conversation_history = []
        self.current_language = "en"
        print("ЁЯФД Conversation history cleared")
